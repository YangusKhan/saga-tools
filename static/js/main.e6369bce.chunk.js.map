{"version":3,"sources":["components/SG/MissionRewardTable.tsx","components/SG/MissionRewardFilters.tsx","components/SG/MissionRewards.tsx","components/Flowchart.tsx","components/SG/BlacksmithPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MissionRewardTable","props","data","filters","React","useContext","FilterContext","className","filter","elements","has","element","filterMissionInfo","map","mission","key","region","city","stat","basic_reward","great_reward","ability_increase","duration","renderMissionInfo","MissionRewardFilters","updateFilters","useState","unda","terra","ignis","aes","natura","prisma","state","setState","onFilterChange","useCallback","event","persist","prevState","target","id","checked","prevFilters","add","delete","type","value","onChange","htmlFor","defaultFilterContext","Set","createContext","MissionRewards","setFilters","Provider","Flowchart","containerRef","useRef","cyRef","useEffect","cytoscape","use","klay","current","autoungrabify","container","layout","name","fit","direction","nodeLayering","spacing","style","selector","label","shape","width","ref","BlacksmithPage","selectedType","App","undefined","a","fetch","missionJSON","JSON","text","missions","parse","fetchData","blacksmith","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6369bce.chunk.js","sourcesContent":["import React from \"react\";\nimport { MissionRewards, FilterContext } from \"./MissionRewards\";\n\nfunction filterMissionInfo(filters: MissionRewards.FilterContext) {\n  return function (data: MissionRewards.MissionInfo) {\n    return filters.elements.has(data.element);\n  };\n}\n\nfunction renderMissionInfo(\n  data: MissionRewards.MissionInfo[],\n  filters: MissionRewards.FilterContext\n) {\n  return data.filter(filterMissionInfo(filters)).map((mission) => {\n    return (\n      <tr className={`bg-${mission.element}`} key={mission.region}>\n        <td>{mission.region}</td>\n        <td>{mission.city}</td>\n        <td>{mission.stat}</td>\n        <td>{mission.basic_reward}</td>\n        <td>{mission.great_reward}</td>\n        <td>{mission.ability_increase}</td>\n        <td>{mission.duration}</td>\n      </tr>\n    );\n  });\n}\n\nexport function MissionRewardTable(props: MissionRewards.Props) {\n  const { data } = props;\n  const filters = React.useContext(FilterContext);\n  return (\n    <div className=\"table-responsive-lg\">\n      <table className=\"table table-bordered table-sm\">\n        <thead className=\"thead-dark\">\n          <tr>\n            <td>Region</td>\n            <td>City</td>\n            <td>Attribute Requirement</td>\n            <td>Basic Reward</td>\n            <td>Great Reward</td>\n            <td>Ability Increase</td>\n            <td>Duration</td>\n          </tr>\n        </thead>\n        <tbody>{renderMissionInfo(data ?? [], filters)}</tbody>\n      </table>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { MissionRewards } from \"./MissionRewards\";\n\ninterface Props {\n  updateFilters: React.Dispatch<\n    React.SetStateAction<MissionRewards.FilterContext>\n  >;\n}\n\nexport function MissionRewardFilters(props: Props) {\n  const { updateFilters } = props;\n  const [state, setState] = React.useState({\n    unda: true,\n    terra: true,\n    ignis: true,\n    aes: true,\n    natura: true,\n    prisma: true,\n  });\n  const onFilterChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      event.persist();\n      setState((prevState) => {\n        return { ...prevState, [event.target.id]: event.target.checked };\n      });\n      updateFilters((prevFilters: MissionRewards.FilterContext) => {\n        if (event.target.checked) {\n          prevFilters.elements.add(event.target.id);\n        } else {\n          prevFilters.elements.delete(event.target.id);\n        }\n        return { ...prevFilters, elements: prevFilters.elements };\n      });\n    },\n    [updateFilters]\n  );\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h4 className=\"card-header\">Reward Type Filters:</h4>\n        <form id=\"mission-filters\">\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"true\"\n              id=\"unda\"\n              checked={state.unda}\n              onChange={onFilterChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"unda\">\n              Unda\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"true\"\n              id=\"terra\"\n              checked={state.terra}\n              onChange={onFilterChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"terra\">\n              Terra\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"true\"\n              id=\"natura\"\n              checked={state.natura}\n              onChange={onFilterChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"natura\">\n              Natura\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"true\"\n              id=\"ignis\"\n              checked={state.ignis}\n              onChange={onFilterChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"ignis\">\n              Ignis\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"true\"\n              id=\"aes\"\n              checked={state.aes}\n              onChange={onFilterChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"aes\">\n              Aes\n            </label>\n          </div>\n          <div className=\"form-check form-check-inline\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"true\"\n              id=\"prisma\"\n              checked={state.prisma}\n              onChange={onFilterChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"prisma\">\n              Prisma\n            </label>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./MissionTable.css\";\nimport { MissionRewardTable } from \"./MissionRewardTable\";\nimport { MissionRewardFilters } from \"./MissionRewardFilters\";\n\nexport declare namespace MissionRewards {\n  export interface MissionInfo {\n    region: string;\n    city: string;\n    name: string;\n    duration: number;\n    stat: string;\n    ability_increase: string;\n    basic_reward: string;\n    great_reward: string;\n    element: string;\n  }\n\n  export interface Props {\n    data?: MissionInfo[];\n  }\n\n  export interface FilterContext {\n    elements: Set<string>;\n  }\n}\n\nexport const defaultFilterContext = {\n  elements: new Set([\"unda\", \"terra\", \"natura\", \"ignis\", \"aes\", \"prisma\"]),\n};\n\nexport const FilterContext = React.createContext<MissionRewards.FilterContext>(\n  defaultFilterContext\n);\n\nexport function MissionRewards(props: MissionRewards.Props) {\n  const [filters, setFilters] = React.useState<MissionRewards.FilterContext>(\n    () => defaultFilterContext\n  );\n  return (\n    <div id=\"mission-rewards\">\n      <FilterContext.Provider value={filters}>\n        <MissionRewardFilters updateFilters={setFilters} />\n        <MissionRewardTable data={props.data} />\n      </FilterContext.Provider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport cytoscape from \"cytoscape\";\n// @ts-ignore\nimport klay from \"cytoscape-klay\";\n\ninterface Props {\n  data: any;\n}\n\nexport function Flowchart({ data }: Props) {\n  const containerRef = React.useRef(null);\n  const cyRef = React.useRef<cytoscape.Core | null>(null);\n  React.useEffect(() => {\n    if (data) {\n      cytoscape.use(klay);\n      cyRef.current = cytoscape({\n        autoungrabify: true,\n        container: containerRef.current,\n        elements: data,\n        layout: {\n          // @ts-ignore\n          name: \"klay\",\n          fit: true,\n          // @ts-ignore\n          klay: {\n            direction: \"RIGHT\",\n            nodeLayering: \"LONGEST_PATH\",\n            spacing: 60,\n          },\n        },\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              label: \"data(name)\",\n              shape: \"rectangle\",\n              \"text-wrap\": \"wrap\",\n              \"text-max-width\": \"100px\",\n            },\n          },\n\n          {\n            selector: \"edge\",\n            style: {\n              width: 3,\n              \"line-color\": \"#ccc\",\n              \"line-style\": \"solid\",\n              \"target-arrow-color\": \"#ccc\",\n              \"target-arrow-shape\": \"triangle\",\n              \"curve-style\": \"straight\",\n              label: \"data(smith_rank)\",\n            },\n          },\n        ],\n      });\n    }\n  }, [containerRef, data]);\n\n  return <div id=\"cy\" ref={containerRef}></div>;\n}\n","import React from \"react\";\nimport cytoscape from \"cytoscape\";\nimport { Flowchart } from \"../Flowchart\";\nimport { GearTypes } from \"../../App\";\nimport \"./BlacksmithPage.css\";\n\ninterface Props {\n  data?: { [k in GearTypes]: cytoscape.ElementDefinition[] };\n}\n\nexport function BlacksmithPage(props: Props) {\n  const { data } = props;\n  const [selectedType, setState] = React.useState<GearTypes>(\"LSword\");\n  return (\n    <div id=\"blacksmith-container\">\n      <Flowchart data={data?.[selectedType]} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport cytoscape from \"cytoscape\";\nimport { MissionRewards } from \"./components/SG/MissionRewards\";\nimport { BlacksmithPage } from \"./components/SG/BlacksmithPage\";\n\nexport type WeaponTypes =\n  | \"LSword\"\n  | \"GSword\"\n  | \"Rapier\"\n  | \"Spear\"\n  | \"Axe\"\n  | \"Club\"\n  | \"Bow\";\n\nexport type GearTypes = WeaponTypes | \"Shield\";\n\ninterface State {\n  missions: any[];\n  blacksmith: { [k in GearTypes]: cytoscape.ElementDefinition[] };\n  tech_spark: { [k in WeaponTypes]: cytoscape.ElementDefinition[] };\n}\n\nfunction App() {\n  const [data, setState] = React.useState<State | undefined>(undefined);\n  React.useEffect(() => {\n    async function fetchData() {\n      const missionJSON = await fetch(\"/saga-tools/data/sg.json\");\n      const missions = JSON.parse(await missionJSON.text());\n      setState(missions);\n    }\n    fetchData();\n    return () => {};\n  }, [setState]);\n\n  return (\n    <div className=\"app-container\">\n      <BlacksmithPage data={data?.blacksmith} />\n      <MissionRewards data={data?.missions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}